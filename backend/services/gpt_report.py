import os
import google.generativeai as genai
from dotenv import load_dotenv

load_dotenv()

MODEL_NAME = os.getenv("MODEL_NAME")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

# Set API key
genai.configure(api_key=GEMINI_API_KEY)

# Load Gemini Pro model
model = genai.GenerativeModel(MODEL_NAME)

def generate_diagnostic_report(detection_data: dict, patient_metadata: dict = None) -> str:
    """
    Generates a diagnostic report from Roboflow object detection output.
    
    Parameters:
        detection_data (dict): Output from Roboflow (bounding boxes, labels).
        patient_metadata (dict): Optional data like patient age, etc.

    Returns:
        str: A diagnostic report.
    """
    
    # Format prompt for LLM
    prompt = "You are a dental radiology assistant. Based on the following detected dental pathologies, generate a simple diagnostic report.\n\n"

    if patient_metadata:
        prompt += f"Patient Info:\n{patient_metadata}\n\n"

    prompt += "Detected Pathologies:\n"
    for i, obj in enumerate(detection_data, 1):
        class_name = obj.get("class_name", "Unknown")
        conf = round(obj.get("confidence", 0.0) * 100, 2)
        bbox = obj.get('bbox')
        x, y, w, h = bbox.get("x"), bbox.get("y"), bbox.get("w"), bbox.get("h")
        prompt += f"{i}. {class_name} with {conf}% confidence at (x={x}, y={y}, width={w}, height={h})\n"

    prompt += "\nThe detections are from roboflow model. Please write a clear and concise dental diagnostic report in the following format:\n"
    prompt += """Dental Radiographic Report
                Date of Radiograph: [Date of generation]
                Findings:
                [whatever the finding are in detail]
                Recommendation:
                [detail recommendations]
                Report Generated By: AI Dignostic Report Generator, Dental Radiology Assistant.
                Important Note: This report is based on automated detection and requires clinical confirmation by a qualified dentist. [other important notes needed]"""

    # Generate response
    response = model.generate_content(prompt)
    return response.text.strip()